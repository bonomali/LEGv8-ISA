$date
	Sun Sep 18 00:40:54 2016
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module top $end
$scope module legv8 $end
$var wire 1 ! clk $end
$var wire 1 " restart_cpu $end
$var reg 1 # microcode_restart $end
$scope module stage1_fetch $end
$var wire 1 " reset $end
$var wire 1 $ zero_flag $end
$var wire 1 % uncond_branch_flag $end
$var wire 64 & pc_out [63:0] $end
$var wire 1 ' next $end
$var wire 64 ( new_pc [63:0] $end
$var wire 32 ) instruction [31:0] $end
$var wire 1 * branch_flag $end
$var reg 96 + pipe_in [95:0] $end
$var reg 96 , pipe_out [95:0] $end
$scope module imem $end
$var wire 32 - instruction [31:0] $end
$var wire 64 . address [63:0] $end
$var integer 32 / aligned_pc [31:0] $end
$var integer 32 0 write_counter [31:0] $end
$scope task write_b $end
$var reg 26 1 br_addr [25:0] $end
$var reg 11 2 opcode [10:0] $end
$upscope $end
$scope task write_cb $end
$var reg 19 3 cond_br_addr [18:0] $end
$var reg 11 4 opcode [10:0] $end
$var reg 5 5 rt [4:0] $end
$upscope $end
$scope task write_d $end
$var reg 9 6 dt_addr [8:0] $end
$var reg 2 7 op [1:0] $end
$var reg 11 8 opcode [10:0] $end
$var reg 5 9 rn [4:0] $end
$var reg 5 : rt [4:0] $end
$upscope $end
$scope task write_i $end
$var reg 12 ; alui [11:0] $end
$var reg 11 < opcode [10:0] $end
$var reg 5 = rd [4:0] $end
$var reg 5 > rn [4:0] $end
$upscope $end
$scope task write_iw $end
$var reg 16 ? movi [15:0] $end
$var reg 11 @ opcode [10:0] $end
$var reg 5 A rd [4:0] $end
$upscope $end
$scope task write_r $end
$var reg 11 B opcode [10:0] $end
$var reg 5 C rd [4:0] $end
$var reg 5 D rm [4:0] $end
$var reg 5 E rn [4:0] $end
$var reg 6 F shamt [5:0] $end
$upscope $end
$upscope $end
$scope module pc $end
$var wire 64 G addr_in [63:0] $end
$var wire 1 " reset $end
$var wire 1 ' wr $end
$var wire 64 H addr_out [63:0] $end
$var reg 64 I latched_addr [63:0] $end
$upscope $end
$upscope $end
$scope module stage2_decode $end
$var wire 1 ! clk $end
$var wire 32 J instruction [31:0] $end
$var wire 64 K writedata [63:0] $end
$var wire 64 L sign_ext [63:0] $end
$var wire 1 M regwrite $end
$var wire 1 N reg2loc $end
$var wire 64 O outB [63:0] $end
$var wire 64 P outA [63:0] $end
$scope module registers $end
$var wire 1 ! clk $end
$var wire 5 Q readreg1 [4:0] $end
$var wire 5 R readreg2 [4:0] $end
$var wire 5 S writereg [4:0] $end
$var wire 64 T writedata [63:0] $end
$var wire 1 M regwr $end
$var reg 64 U outA [63:0] $end
$var reg 64 V outB [63:0] $end
$scope begin $unm_blk_35 $end
$var integer 32 W i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module stage3_execute $end
$var wire 2 X aluop [1:0] $end
$var wire 64 Y opA [63:0] $end
$var wire 64 Z opB [63:0] $end
$var wire 11 [ opcode [10:0] $end
$var wire 64 \ pc [63:0] $end
$var wire 64 ] sign_ext [63:0] $end
$var wire 1 $ zero $end
$var wire 64 ^ result [63:0] $end
$var wire 1 _ alusrc $end
$var wire 64 ` add_uncond [63:0] $end
$scope module alu $end
$var wire 4 a func [3:0] $end
$var wire 64 b opA [63:0] $end
$var wire 64 c opB [63:0] $end
$var wire 1 $ zero $end
$var wire 64 d result [63:0] $end
$upscope $end
$upscope $end
$scope module stage4_memory_access $end
$var wire 64 e address [63:0] $end
$var wire 64 f data_in [63:0] $end
$var wire 1 g memwrite $end
$var wire 1 h memread $end
$var wire 64 i data_out [63:0] $end
$scope module data_memory $end
$var wire 64 j address [63:0] $end
$var wire 64 k data_in [63:0] $end
$var wire 1 g memwrite $end
$var wire 1 h memread $end
$var wire 64 l data_out [63:0] $end
$upscope $end
$upscope $end
$scope module stage5_writeback $end
$var wire 64 m val_stage3_execute [63:0] $end
$var wire 64 n val_stage4_memacc [63:0] $end
$var wire 64 o writeback_data [63:0] $end
$var wire 1 p memtoreg $end
$upscope $end
$scope module ucode $end
$var wire 1 ! clk $end
$var wire 11 q opcode [10:0] $end
$var wire 1 # sos $end
$var wire 1 r eos $end
$var reg 8 s code_ip [7:0] $end
$var reg 33 t ctrl [32:0] $end
$var reg 1 u flag_jmp $end
$var reg 8 v flag_jmp_addr [7:0] $end
$var reg 32 w func_fmt [31:0] $end
$var reg 2 x instruction_type [1:0] $end
$var reg 1 y microunit_init $end
$var reg 1 z microunit_running $end
$var reg 8 { stack_ptr [7:0] $end
$var reg 1 | zero $end
$var integer 32 } int_segment_counter [31:0] $end
$var integer 32 ~ microinstr_ctr [31:0] $end
$var integer 32 !" segment_counter [31:0] $end
$scope task check_microcode_running $end
$upscope $end
$scope task exec_microinstruction $end
$var reg 8 "" address [7:0] $end
$upscope $end
$scope task microinstr $end
$var reg 32 #" control [31:0] $end
$var reg 32 $" func [31:0] $end
$var reg 2 %" seg_type [1:0] $end
$var integer 32 &" is_eos [31:0] $end
$var integer 32 '" is_sos [31:0] $end
$upscope $end
$scope task microinstr_finish $end
$upscope $end
$scope task pop_stack $end
$upscope $end
$scope task push_stack $end
$var reg 8 (" address [7:0] $end
$upscope $end
$scope task schedule_jmp $end
$var reg 8 )" new_addr [7:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx )"
bx ("
b1 '"
b1 &"
b0 %"
b0 $"
b1001010 #"
b0 ""
b100000000 !"
b100000000 ~
b100000000 }
0|
b0 {
1z
1y
b0 x
b0 w
b11111111 v
0u
b100 t
b0 s
0r
b0 q
0p
b0 o
bz n
b0 m
bz l
b0 k
b0 j
bz i
0h
0g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b11111110101110100100100 `
0_
b0 ^
b111111101011101001001 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b100000 W
b0 V
b0 U
b0 T
b1001 S
b11111 R
b11010 Q
b0 P
b0 O
0N
0M
b111111101011101001001 L
b0 K
b111111101011101001001 J
b0 I
b0 H
b11111110101110100100100 G
bx F
bx E
bx D
bx C
bx B
b1001 A
b1 @
b1111111010111010 ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
b10 0
b100 /
b0 .
b111111101011101001001 -
bx ,
bx010010010000000000000000000000000000000000000000000000000000000000000000 +
0*
b111111101011101001001 )
b11111110101110100100100 (
0'
b0 &
1%
1$
1#
1"
0!
$end
#1
0"
1!
#2
0#
0!
#3
b100 G
b1001 R
0%
1N
b1000 t
b1 ""
b1 s
1!
#4
0!
#5
b1 [
b1 q
b1111111101011101001001 L
b1111111101011101001001 ]
b1111111101011101001001 )
b1111111101011101001001 -
b1111111101011101001001 J
b1000 G
b1111111010111010010010000000000000000000000000000000000000000000000000000000000000100 +
bx010010010000000000000000000000000000000000000000000000000000000000000000 ,
b111111110101110100101000 (
b111111110101110100101000 `
b100 &
b100 .
b100 H
b100 I
b100 \
b11111 R
1'
1r
0N
b100000000000000000000000000000001 t
b10 ""
b10 s
1!
#6
0!
#7
b111111110101110100101000 G
b11111111010111010010010000000000000000000000000000000000000000000000000000000000000100 +
b1111111010111010010010000000000000000000000000000000000000000000000000000000000000100 ,
b1001 R
0'
1*
1N
b1 X
b100000000000000000000000001001010 t
b1000 ""
b1000 s
1#
1!
#8
0#
0!
#9
1!
#10
0!
#11
1!
#12
0!
#13
1!
#14
0!
#15
1!
#16
0!
#17
1!
#18
0!
#19
1!
#20
0!
#21
1!
#22
0!
#23
1!
#24
0!
#25
1!
#26
0!
#27
1!
#28
0!
#29
1!
#30
0!
#31
1!
#32
0!
#33
1!
#34
0!
#35
1!
#36
0!
#37
1!
#38
0!
#39
1!
#40
0!
#41
1!
#42
0!
#43
1!
#44
0!
#45
1!
#46
0!
#47
1!
#48
0!
#49
1!
#50
0!
#51
1!
